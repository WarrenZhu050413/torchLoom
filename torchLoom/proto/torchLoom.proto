syntax = "proto3";

message RegisterDevice       { string device_uuid = 1; string replica_id = 2; }
message ChangeConfigEvent    { map<string, string> config_params = 1; }

// Enum for basic message types for pipe communication
enum PipeMessageType {
  PIPE_MESSAGE_TYPE_UNSPECIFIED = 0; // Default value
  PIPE_HEARTBEAT = 1;
  PIPE_METRICS = 2;
  PIPE_CONFIG = 3;
  PIPE_COMMAND = 4;
}

// Enum for simple command types
enum PipeCommandType {
  PIPE_COMMAND_TYPE_UNSPECIFIED = 0; // Default value
  KILL = 1;
  PAUSE = 2;
  RESUME = 3;
  UPDATE_CONFIG = 4;
}

// Heartbeat message for pipe communication
message PipeHeartbeatMessage {
  PipeMessageType message_type = 1;
  int64 timestamp = 2; // Unix timestamp
  string replica_id = 3;
  string status = 4;   // "active"
}

// Metrics message for pipe communication
message PipeMetricsMessage {
  PipeMessageType message_type = 1;
  int64 timestamp = 2; // Unix timestamp
  string replica_id = 3;
  int32 step = 4;
  int32 epoch = 5;
  optional float loss = 6;
  optional float accuracy = 7;
  optional float gradient_norm = 8;
  map<string, string> metrics = 9; // Using string for Any, to be parsed
}

// Config message for pipe communication
message PipeConfigMessage {
  PipeMessageType message_type = 1;
  int64 timestamp = 2; // Unix timestamp
  string replica_id = 3;
  map<string, string> config_params = 4; // Using string for Any, to be parsed
}

// Command message for pipe communication
message PipeCommandMessage {
  PipeMessageType message_type = 1;
  int64 timestamp = 2; // Unix timestamp
  string replica_id = 3;
  PipeCommandType command_type = 4;
  map<string, string> params = 5; // Using string for Any, to be parsed
}

// Heartbeat message for threadlet -> weaver
message Heartbeat {
  string replica_id = 1;
  string device_uuid = 2;
  int64 timestamp = 3;               // Unix timestamp when heartbeat was sent
  string status = 4;                 // "active", "training", "idle"
  map<string, string> metadata = 5;  // Optional metadata (step, epoch, etc.)
}

// Training Process -> Weaver messages
message TrainingStatus {
  string replica_id = 1;
  string status_type = 2;         // "training_start", "epoch_start", "batch_update", "epoch_complete", "training_complete"
  int64 current_step = 3;
  int64 epoch = 4;
  string status = 5;              // "starting", "training", "completed", "paused"
  map<string, string> metrics = 6; // loss, accuracy, learning_rate, etc.
  float training_time = 7;        // Total training time in seconds
  int64 max_step = 8;
  int64 max_epoch = 9;
}

message deviceStatus {
  string device_id = 1;
  string replica_id = 2;
  string server_id = 3;
  string status = 4;              // "active", "offline", "failed"
  float utilization = 5;          // 0-100%
  float temperature = 6;          // Celsius
  float memory_used = 7;          // GB
  float memory_total = 8;         // GB
  map<string, string> config = 9; // Training config (lr, batch_size, optimizer, etc.)
}

// UI -> Weaver messages
message UICommand {
  string command_type = 1;  // "deactivate_device", "reactivate_group", "update_config", "pause_training", "resume_training"
  string target_id = 2;     // device_id or replica_group_id
  map<string, string> params = 3;
}

// Weaver -> Training Process messages
message WeaverCommand {
  string command_type = 1;  // "update_config", "pause", "resume", "stop"
  string target_replica_id = 2;
  map<string, string> params = 3;
}

// Weaver -> UI messages
message UIStatusUpdate {
  repeated deviceStatus devices = 2;
  repeated TrainingStatus training_status = 3;
  int64 timestamp = 7;
}

message EventEnvelope {
  uint64  seq      = 1;
  uint64  ts_nanos = 2;
  oneof body {
    RegisterDevice       register_device   = 9;
    ChangeConfigEvent    config_info       = 15;
    
    // Heartbeat
    Heartbeat           heartbeat          = 16;
    
    // Training Process -> Weaver
    TrainingStatus       training_status   = 17;
    deviceStatus           device_status         = 18;
    
    // UI <-> Weaver
    UICommand           ui_command         = 21;
    UIStatusUpdate      ui_status_update   = 22;
    
    // Weaver -> Training Process
    WeaverCommand       weaver_command     = 23;

    // Pipe Messages
    PipeHeartbeatMessage pipe_heartbeat     = 24;
    PipeMetricsMessage   pipe_metrics       = 25;
    PipeConfigMessage    pipe_config        = 26;
    PipeCommandMessage   pipe_command       = 27;
  }
}

message DeviceReplicaMapEntry {
  string device_uuid = 1;
  int32  replica_id   = 2;
}